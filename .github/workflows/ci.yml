name: Build and Deploy

on:
    push:
        branches:
            - main
            - dev

jobs:
    build-and-deploy:
        runs-on: self-hosted
        steps:
            - name: Checkout
              uses: actions/checkout@v2.3.1
              with:
                  persist-credentials: false

            - name: Cache nextjs build
              uses: actions/cache@v2
              with:
                  path: ${{ github.workspace }}/.next/cache
                  # Generate a new cache whenever packages or source files change.
                  key: ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-${{ hashFiles('**.[jt]sx?') }}
                  # If source files changed but packages didn't, rebuild from a prior cache.
                  restore-keys: |
                      ${{ runner.os }}-nextjs-${{ hashFiles('**/yarn.lock') }}-

            - name: Cache node_modules
              id: node-cache
              uses: actions/cache@v2
              env:
                  cache-name: cache-node-modules
              with:
                  # npm cache files are stored in `~/.npm` on Linux/macOS
                  path: node_modules
                  key: ${{ runner.os }}-node-modules-${{ hashFiles('**/yarn.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-node-modules-

            - name: Install and Build
              uses: actions/setup-node@v1
              with:
                  node-version: "14.x"

            - name: Install yarn
              run: |
                  npm install -g yarn

            - name: Prepare package
              run: |
                  yarn

            - name: Lint
              run: |
                  yarn lint

            - name: Configure AWS credentials
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ap-northeast-2

            - name: Login to Amazon ECR
              id: login-ecr
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build, tag, and push image to Amazon ECR
              env:
                  ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
                  ECR_REPOSITORY: usalt-app
                  IMAGE_TAG: ${{ github.sha }}
              run: |
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
                  docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
                  docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

            - name: Publish using Docker Swarm
              uses: appleboy/ssh-action@master
              with:
                  host: sophia-dev.io
                  username: root
                  password: ${{ secrets.SSH_PASSWORD }}
                  script: |
                      eval $(aws ecr get-login --no-include-email --region ap-northeast-2)
                      . ~/usalt/env.prod.sh
                      docker stack deploy -c ~/usalt/docker-compose.yml usalt --with-registry-auth
                      docker container prune -f 

            - uses: sarisia/actions-status-discord@v1
              if: always()
              with:
                  webhook: ${{ secrets.DISCORD_WEBHOOK }}
